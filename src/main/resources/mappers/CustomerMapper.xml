<?xml version = "1.0" encoding = "UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.grocery.on.wheels.dao.CustomerMapper">
	<resultMap type="com.grocery.on.wheels.model.Customer" id="customerMap">
		<id column="customerId" property="customerId"/>
		<result column="customerName" property="customerName"/>
		<collection property="address" javaType="ArrayList" ofType="com.grocery.on.wheels.model.CustomerAddress">
			<result column="customerAddress" property="customerAddress"/>
			<result column="customerMob" property="customerMob"/>
		</collection>
	</resultMap>

	<select id="getCustomers" resultMap="customerMap">
		SELECT c.customer_id as customerId, c.customer_name as customerName,
		ca.customer_address as customerAddress, ca.customer_mob as customerMob FROM customer c
 		join customer_address ca on (c.customer_id = ca.customer_id)
	</select>
	
	<select id="findCustomers" resultMap="customerMap" parameterType="String">
		SELECT c.customer_id as customerId, c.customer_name as customerName,
		ca.customer_address as customerAddress, ca.customer_mob as customerMob FROM customer c
 		join customer_address ca on (c.customer_id = ca.customer_id and (c.customer_name like #{searchText}
 		or ca.customer_address like #{searchText} or ca.customer_mob like #{searchText})
 		)
	</select>
	
	<select id="findParamCustomers" resultMap="customerMap">
		SELECT c.customer_id as customerId, c.customer_name as customerName,
		ca.customer_address as customerAddress, ca.customer_mob as customerMob FROM customer c
 		join customer_address ca on (c.customer_id = ca.customer_id and
        <if test="paramText == 'name'">
			 c.customer_name like #{searchText}
		</if>
		<if test="paramText == 'address'">
			 ca.customer_address like #{searchText}
		</if>
		<if test="paramText == 'phone'">
			 ca.customer_mob like #{searchText}
		</if>
		<if test="paramText == ''">
			 c.customer_name like #{searchText}
		</if>
		)
	</select>
	
	
	<insert id="addCustomer" parameterType="com.grocery.on.wheels.model.Customer">
		insert into customer(customer_id, customer_name) values 
		(#{customerId}, #{customerName})
	</insert>
	
	
	<insert id="addCustomerAddress" parameterType="com.grocery.on.wheels.model.Customer">
		INSERT INTO customer_address (customer_id, customer_address, customer_mob)
		 VALUES 
		 <foreach collection="address" item="custAddress" index="index" open="(" separator="),("  close=")">
	            #{customerId},
	            #{custAddress.customerAddress},
	            #{custAddress.customerMob}
	       </foreach>
	</insert>
	
	<delete id="clearCustomer">
		delete from customer_address;
		delete from customer;
	</delete>
		
	
</mapper>

